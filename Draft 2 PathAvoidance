
import Tkinter as tk
import time
import threading
import Queue
from HamsterAPI.comm_usb import RobotComm

gMaxRobotNum = 1 # max number of robots to control
gRobotList = None
gQuit = False

def movement(command):
    if (len(gRobotList) > 0):
        robot = gRobotList[0]
        if command == 'f':
            robot.set_wheel(0, 20) 
            robot.set_wheel(1,20)
            time.sleep(1)
            print "Forward"

        if command == 'r':
            robot.set_wheel(0, 20) 
            robot.set_wheel(1,20)
            time.sleep(.3)
            robot.set_wheel(0, -22) 
            robot.set_wheel(1, 22)
            time.sleep(1)
            print "Right"

        if command == 'l':
            robot.set_wheel(0, 20) 
            robot.set_wheel(1,20)
            time.sleep(.3)
            robot.set_wheel(0, 20) 
            robot.set_wheel(1, -20)
            time.sleep(1)
            print "left"

        if command == 's':
            robot.set_wheel(0, 0) 
            robot.set_wheel(1,0)
            time.sleep(1)
            print "stop"
            exitProg()

def behavior_2steps(): #using the right floor sensor to follow the left edge of a black line
    print ""
    S_t = 30 # wheel speed
    T_r = 30 # turning radius - smaller will track close to curve, but oscillate 
    b2 = 20 # half distance between two wheels in mm

    while not gQuit:
        if (gState == "2steps"):
           if (len(gRobotList) > 0):
                robot = gRobotList[0]
                floor_l = robot.get_floor(0)
                floor_r = robot.get_floor(1)
                sensor_diff = floor_l - floor_r
                print "floor l, r", floor_l, floor_r, sensor_diff
                if (sensor_diff < 0): #steer left
                    s_l = S_t*(T_r-b2)/(T_r+b2)
                    s_r = S_t
                elif (sensor_diff > 0):
                    s_r = S_t*(T_r-b2)/(T_r+b2)
                    s_l = S_t
                else:
                    s_l = s_r = S_t

                robot.set_wheel(0,s_l)
                robot.set_wheel(1,s_r)
                time.sleep(0.1)     
        time.sleep(0.01)

    print "stop the robot"


def behavior_p_controller():
    kp = .5 
    floor_mid = 50
    S_t = 30 # wheel speed
    T_r = 50 # turning radius - smaller will track close to curve, but oscillate 
    b2 = 20 # half distance between two wheels10 in mm

    counter = 0
    coordinates = [13,14,24,34,33,43,53,52,51,41]
    direction = ['r', 'f', 'r', 'l', 'f', 'r', 'f', 'f', 'r', 's']


    while not gQuit:
        if (len(gRobotList) > 0):
            if (gState == "P" and counter < len(direction)):
                robot = gRobotList[0]
                floor_l = robot.get_floor(0)
                floor_r = robot.get_floor(1)
                sensor_diff = floor_l - floor_r
                print "floor l, r", floor_l, floor_r, sensor_diff
                #print "floor", floor_r
                #error = floor_mid - floor_r
                #s_l = S_t*(T_r-error)/(T_r+error)
                #s_r = S_t*(T_r+error)/(T_r-error)
                s_l = S_t + sensor_diff*kp
                s_r = S_t - sensor_diff*kp

                if (floor_l < 30 and floor_r < 30):
                    movement(direction[counter])
                    counter+=1

                if not counter == len(direction):
                    robot.set_wheel(0, int(s_l)) 
                    robot.set_wheel(1,int(s_r))
                time.sleep(0.05)     
        time.sleep(0.01)

    print "stop the robot"


def pathfind(self, list):
    kp = .5 
    floor_mid = 50
    S_t = 30 # wheel speed
    T_r = 50 # turning radius - smaller will track close to curve, but oscillate 
    b2 = 20 # half distance between two wheels in mm

    while not gQuit:
        if (len(gRobotList) > 0):
            robot = gRobotList[0]
            floor_l = robot.get_floor(0)
            floor_r = robot.get_floor(1)
            sensor_diff = floor_l - floor_r
            print "floor l, r", floor_l, floor_r, sensor_diff
            #print "floor", floor_r
            #error = floor_mid - floor_r
            #s_l = S_t*(T_r-error)/(T_r+error)
            #s_r = S_t*(T_r+error)/(T_r-error)
            s_l = S_t + sensor_diff*kp
            s_r = S_t - sensor_diff*kp

            if (floor_l < 30 and floor_r < 30):

                robot.set_wheel(0, 20) 
                robot.set_wheel(1,-20)
                time.sleep(1)

                robot.set_wheel(0, int(s_l)) 
                robot.set_wheel(1,int(s_r))
                time.sleep(0.05)     
                time.sleep(0.01)
            else:
                robot.set_wheel(0, 60) 
                robot.set_wheel(1,60)
                time.sleep(1)

                robot.set_wheel(0, int(s_l)) 
                robot.set_wheel(1,int(s_r))
                time.sleep(0.05)     
                time.sleep(0.01)


def TwoSteps(event=None):
    global gState
    gState = "2steps"

def P_controller(event=None):
    global gState
    gState = "P"

def exitProg(event=None):
    frame.quit()
    print "Exit"

class Node:
    def __init__(self):
      self.name = ''
      self.data =[]
      #self.f_cost = 0
      #self.h_cost = 0
      #self.back_pointer = False
      self.closed = False
      self.edges = []

class Graph:
    def __init__(self, canvas):
        self.nodes = {}
        self.startNode = None
        self.goalNode = None
        #self.path = []
        #self.path_cost = False
        self.queue = Queue.Queue()
        #self.lifo_queue = Queue.LifoQueue()
        #self.priority_queue = Queue.PriorityQueue()
        self.canvas = canvas
        self.node_dist = 60
        self.node_size = 20

    def draw_node(self, a_node, n_color):
        if a_node.data: # coordinate to draw
          x = a_node.data[0]
          y = a_node.data[1]
          canvas = self.canvas
          dist = self.node_dist
          size = self.node_size
          canvas.create_oval(x*dist-size, y*dist-size, x*dist+size, y*dist+size, fill=n_color)
          canvas.create_text(x*dist, y*dist,fill="white",text=a_node.name)

    def draw_edge(self, node1, node2, e_color):
      if (node1.data and node2.data):
          x1 = node1.data[0]
          y1 = node1.data[1]
          x2 = node2.data[0]
          y2 = node2.data[1]
          dist = self.node_dist
          canvas = self.canvas
          canvas.create_line(x1*dist, y1*dist, x2*dist, y2*dist, fill=e_color)

    def add_node(self, name, data):
        a_node = Node()
        a_node.name = name
        a_node.data = data
        self.nodes[name] = a_node
        self.draw_node(a_node, "blue")
        return a_node

    def set_start(self, name):
        self.startNode = name
        self.draw_node(self.nodes[name], "red")
        self.nodes[name].f_cost = 0
        self.queue.put(self.nodes[name])

    def set_goal(self, name):
        self.goalNode = name
        self.draw_node(self.nodes[name], "green")

    def add_edge(self, node1, node2, g_cost):
        self.nodes[node1].edges.append([node2, g_cost])
        self.nodes[node2].edges.append([node1, g_cost])
        self.draw_edge(self.nodes[node1], self.nodes[node2], "blue")

    def BFS(self): # Breadth First Search
        print "Breadth First Search"
        while not self.queue.empty():
            current_node = self.queue.get()
        if (current_node.closed != True):
            print "expand current node: ", current_node.name
            print "edges from node: ",current_node.edges
            for an_edge in current_node.edges:
                a_node_name = an_edge[0]
                if not self.nodes[a_node_name].closed: #has been "expanded"
                    self.queue.put(self.nodes[a_node_name])
                    print "put queue: ", a_node_name
                    self.nodes[a_node_name].back_pointer = current_node
                else:
                    print "node closed: ", a_node_name
                    current_node.closed = True


        #for coordinates in MyGraph.path:
            #x = coordinates[0]
            #y = coordinates[1]   

    
        #if(x == current_x and y < current_y):
        #coordinates = [13,14,24,34,33,43,53,52,51,41]
        #direction = ['f', 'r', 'f', 'l', 'r', 'f', 'l', 'f', 'l']

        frame.mainloop()

        gQuit = True

def main():

    global gMaxRobotNum
    global frame
    global gRobotList
    global gQuit
    global gState

    comm = RobotComm(gMaxRobotNum)
    comm.start()

    print 'Bluetooth starts'
    gRobotList = comm.robotList

    gQuit = False
    gState = False
  
    #behavior_thread1 = threading.Thread(target=behavior_2steps)
    #behavior_thread1.daemon = True
    #behavior_thread1.start()

    # start a behavior tread

    behavior_thread3 = threading.Thread(target=behavior_p_controller)
    behavior_thread3.daemon = True
    behavior_thread3.start()    

    frame = tk.Tk()

    button3 = tk.Button(frame,text="P")
    button3.pack(side='left')
    button3.bind('<Button-1>', P_controller)

    button1 = tk.Button(frame,text="2Steps")
    button1.pack(side='left')
    button1.bind('<Button-1>', TwoSteps)

    canvas = tk.Canvas(frame, bg="white", width=300, height=300)
    canvas.pack(expand=1, fill='both')

    print "created graph"
    MyGraph = Graph(canvas)

    Node_A = MyGraph.add_node("14", [1,4])
    Node_B = MyGraph.add_node("13", [1,3])
    Node_C = MyGraph.add_node("12", [1,2])
    Node_D = MyGraph.add_node("11", [1,1])
    Node_E = MyGraph.add_node("21", [2,1])
    Node_F = MyGraph.add_node("22", [2,2])
    Node_G = MyGraph.add_node("24", [2,4])
    Node_H = MyGraph.add_node("32", [3,2])
    Node_I = MyGraph.add_node("33", [3,3])
    Node_J = MyGraph.add_node("34", [3,4])
    Node_K = MyGraph.add_node("43", [4,3])
    Node_L = MyGraph.add_node("51", [5,1])
    Node_M = MyGraph.add_node("52", [5,2])
    Node_N = MyGraph.add_node("53", [5,3])
    Node_O = MyGraph.add_node("54", [5,4])
    Node_P = MyGraph.add_node("41", [4,1])

    MyGraph.set_start("13")
    MyGraph.set_goal("41")

    #MyGraph.add_edge("A", "S", 3)
    #MyGraph.add_edge("B", "S", 3)
    #MyGraph.add_edge("C", "S", 2)
    MyGraph.add_edge("13", "11", 1)
    MyGraph.add_edge("14", "11", 5)
    MyGraph.add_edge("12", "11", 3)
    MyGraph.add_edge("21", "11", 3)
    MyGraph.add_edge("13", "11", 1)
    MyGraph.add_edge("21", "22", 1)
    MyGraph.add_edge("12", "22", 1)
    MyGraph.add_edge("14", "24", 1)
    MyGraph.add_edge("24", "34", 1)
    MyGraph.add_edge("33", "34", 1)
    MyGraph.add_edge("33", "32", 1)
    MyGraph.add_edge("43", "53", 1)
    MyGraph.add_edge("22", "32", 1)
    MyGraph.add_edge("33", "43", 1)
    MyGraph.add_edge("54", "53", 1)
    MyGraph.add_edge("53", "52", 1)
    MyGraph.add_edge("51", "52", 1)
    MyGraph.add_edge("51", "41", 1)


    MyGraph.BFS()

   # if behavior_thread1:
   #     behavior_thread1.join()

    if behavior_thread2:
        behavior_thread2.join()
    if behavior_thread3:
        behavior_thread3.join()
    for robot in gRobotList:
      robot.reset()

    time.sleep(1.0)
    comm.stop()
    comm.join()
    print("terminated!")
    gQuit = True


if __name__ == "__main__":
    main()
